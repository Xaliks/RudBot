const { MessageButton } = require("discord.js");

module.exports = {
	name: "tictactoe",
	description: "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏",
	category: "commands",
	cooldown: 60,
	aliases: ["ttt", "tic-tac-toe"],
	usage: ["<@–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å>"],
	async execute(message, args, bot) {
		const user = bot.utils.findMember(message, args.join(" "))?.user;
		if (!user) return bot.utils.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", this, message, bot);
		if (user.bot) return bot.utils.error("–ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å –±–æ—Ç–∞–º–∏!", this, message, bot);
		if (user === message.author) return bot.utils.error("–ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å —Å–æ–±–æ–π!", this, message, bot);
		const buttons = [
			new MessageButton().setEmoji("üü¶").setCustomId("0").setStyle("PRIMARY"),
			new MessageButton().setEmoji("üü¶").setCustomId("1").setStyle("PRIMARY"),
			new MessageButton().setEmoji("üü¶").setCustomId("2").setStyle("PRIMARY"),
			new MessageButton().setEmoji("üü¶").setCustomId("3").setStyle("PRIMARY"),
			new MessageButton().setEmoji("üü¶").setCustomId("4").setStyle("PRIMARY"),
			new MessageButton().setEmoji("üü¶").setCustomId("5").setStyle("PRIMARY"),
			new MessageButton().setEmoji("üü¶").setCustomId("6").setStyle("PRIMARY"),
			new MessageButton().setEmoji("üü¶").setCustomId("7").setStyle("PRIMARY"),
			new MessageButton().setEmoji("üü¶").setCustomId("8").setStyle("PRIMARY"),
		];
		let t = new Array(9);

		//------------------
		const filter = (m) => m.author.id === user.id;
		let success = false;
		message.channel.send(
			`${user}, –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ —Å ${message.author}? (–¥–∞/–Ω–µ—Ç) –£ –≤–∞—Å –µ—Å—Ç—å 15 —Å–µ–∫—É–Ω–¥`,
		);
		const MessageCollect = message.channel.createMessageCollector({
			filter,
			max: 1,
			time: 15000,
		});
		let last = user.id;
		MessageCollect.on("collect", (msgg) => {
			success = true;
			if (!["y", "yes", "–¥", "–¥–∞"].includes(msgg.content.split(/ +/g)[0].toLowerCase()))
				return message.channel.send(`${user} –Ω–µ –∑–∞—Ö–æ—Ç–µ–ª –∏–≥—Ä–∞—Ç—å —Å –≤–∞–º–∏!`);
			let content = `–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏. –£ –≤–∞—Å –µ—Å—Ç—å **1 –º–∏–Ω—É—Ç–∞**!
            
–•–æ–¥–∏—Ç: ${message.author}`;
			message.channel
				.send({
					content: content,
					components: [
						{
							type: 1,
							components: [buttons[0], buttons[1], buttons[2]],
						},
						{
							type: 1,
							components: [buttons[3], buttons[4], buttons[5]],
						},
						{
							type: 1,
							components: [buttons[6], buttons[7], buttons[8]],
						},
					],
				})
				.then((msg) => {
					function edit(btn) {
						btn[btn === msg ? "edit" : "update"]({
							content: content,
							components: [
								{
									type: 1,
									components: [buttons[0], buttons[1], buttons[2]],
								},
								{
									type: 1,
									components: [buttons[3], buttons[4], buttons[5]],
								},
								{
									type: 1,
									components: [buttons[6], buttons[7], buttons[8]],
								},
							],
						});
					}
					const collect = msg.createMessageComponentCollector(
						(m) => m.user.id === message.author.id || m.user.id === user.id,
						{
							time: 60000,
						},
					);

					collect.on("collect", (btn) => {
						if (msg.deleted) return;
						if (last === btn.user.id)
							return btn.reply({
								content: "–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Ö–æ–¥–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑!",
								ephemeral: true,
							});

						if (btn.user.id === message.author.id) {
							buttons[Number(btn.customId)].setEmoji("‚ùå");
							t[Number(btn.customId)] = 0;
						} else {
							buttons[Number(btn.customId)].setEmoji("‚≠ï");
							t[Number(btn.customId)] = 1;
						}

						const winnner = checkWinner(t, message.author, user);
						if (Boolean(winnner)) {
							content = `–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏.

${winnner === "draw" ? "–ù–∏—á—å—è!" : `–ü–æ–±–µ–¥–∏–ª(-–∞) ${winnner}`}`;
							buttons.forEach((b) => b.setDisabled(true));
						} else {
							last = btn.user.id;
							content = `–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏.
                    
–•–æ–¥–∏—Ç: ${btn.user.id === message.author.id ? user : message.author}`;

							buttons[Number(btn.customId)].setDisabled(true);
						}
						edit(btn);
					});
					collect.on("end", () => {
						if (msg.deleted) return;
						if (checkWinner(t, message.author, user)) return;
						content = `–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏.
                        
–í—Ä–µ–º—è –≤—ã—à–ª–æ!`;
						buttons.forEach((b) => b.setDisabled(true));
						edit(msg);
					});
				});
		});
		MessageCollect.on("end", () => {
			if (success) return;
			message.channel.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ!");
		});
	},
};

function checkWinner(t, p, u) {
	if (
		(t[0] == 0 && t[1] == 0 && t[2] == 0) ||
		(t[3] == 0 && t[4] == 0 && t[5] == 0) ||
		(t[6] == 0 && t[7] == 0 && t[8] == 0) ||
		(t[0] == 0 && t[3] == 0 && t[6] == 0) ||
		(t[1] == 0 && t[4] == 0 && t[7] == 0) ||
		(t[2] == 0 && t[5] == 0 && t[8] == 0) ||
		(t[0] == 0 && t[4] == 0 && t[8] == 0) ||
		(t[2] == 0 && t[4] == 0 && t[6] == 0)
	)
		return p;
	if (
		(t[0] == 1 && t[1] == 1 && t[2] == 1) ||
		(t[3] == 1 && t[4] == 1 && t[5] == 1) ||
		(t[6] == 1 && t[7] == 1 && t[8] == 1) ||
		(t[0] == 1 && t[3] == 1 && t[6] == 1) ||
		(t[1] == 1 && t[4] == 1 && t[7] == 1) ||
		(t[2] == 1 && t[5] == 1 && t[8] == 1) ||
		(t[0] == 1 && t[4] == 1 && t[8] == 1) ||
		(t[2] == 1 && t[4] == 1 && t[6] == 1)
	)
		return u;

	if (
		t[0] != undefined &&
		t[1] != undefined &&
		t[2] != undefined &&
		t[3] != undefined &&
		t[4] != undefined &&
		t[5] != undefined &&
		t[6] != undefined &&
		t[7] != undefined &&
		t[8] != undefined
	)
		return "draw";
}
