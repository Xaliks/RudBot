const { MessageButton, MessageEmbed } = require("discord.js");

module.exports = {
	name: "tictactoe",
	description: "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏",
	category: "commands",
	cooldown: 60,
	aliases: ["ttt", "tic-tac-toe"],
	usage: ["<@–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å>"],
	async execute(message, args, bot) {
		const user = bot.utils.findMember(message, args.join(" "))?.user;
		if (!user) return bot.utils.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", this, message, bot);
		if (user.bot) return bot.utils.error("–ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å –±–æ—Ç–∞–º–∏!", this, message, bot);
		if (user === message.author) return bot.utils.error("–ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å —Å–æ–±–æ–π!", this, message, bot);
		const buttons = [
			new MessageButton().setEmoji("‚¨õ").setCustomId("0").setStyle(2),
			new MessageButton().setEmoji("‚¨õ").setCustomId("1").setStyle(2),
			new MessageButton().setEmoji("‚¨õ").setCustomId("2").setStyle(2),
			new MessageButton().setEmoji("‚¨õ").setCustomId("3").setStyle(2),
			new MessageButton().setEmoji("‚¨õ").setCustomId("4").setStyle(2),
			new MessageButton().setEmoji("‚¨õ").setCustomId("5").setStyle(2),
			new MessageButton().setEmoji("‚¨õ").setCustomId("6").setStyle(2),
			new MessageButton().setEmoji("‚¨õ").setCustomId("7").setStyle(2),
			new MessageButton().setEmoji("‚¨õ").setCustomId("8").setStyle(2),
		];
		let t = new Array(9);

		//------------------
		let success = false;
		let msg = await message.channel.send({
			content: `${user}, –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ —Å ${message.author}? –£ –≤–∞—Å –µ—Å—Ç—å 10 —Å–µ–∫—É–Ω–¥`,
			components: [
				{
					type: 1,
					components: [
						new MessageButton().setEmoji("‚úÖ").setCustomId("yes").setStyle(2),
						new MessageButton().setEmoji("üö´").setCustomId("no").setStyle(2),
					],
				},
			],
		});
		const FirstCollector = msg.createMessageComponentCollector({
			time: 10000,
		});
		let last = user.id;

		FirstCollector.on("collect", async (button) => {
			success = true;

			if (button.user.id != user.id)
				return button.reply({ content: "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É", ephemeral: true });
			if (button.customId === "no") {
				FirstCollector.stop();
				return message.channel.send(`${user} –Ω–µ –∑–∞—Ö–æ—Ç–µ–ª –∏–≥—Ä–∞—Ç—å —Å –≤–∞–º–∏!`);
			}

			const embed = new MessageEmbed().setTitle("–ö—Ä–µ—Å—Ç–∏–∫–∏-–ù–æ–ª–∏–∫–∏").setDescription(`–•–æ–¥–∏—Ç: ${message.author}`);
			function components(btns) {
				return [
					{
						type: 1,
						components: [btns[0], btns[1], btns[2]],
					},
					{
						type: 1,
						components: [btns[3], btns[4], btns[5]],
					},
					{
						type: 1,
						components: [btns[6], btns[7], btns[8]],
					},
				];
			}

			msg = await msg.edit({ content: null, embeds: [embed], components: components(buttons) });
			const SecondCollector = msg.createMessageComponentCollector({ time: 60000 });

			SecondCollector.on("collect", (btn) => {
				if (msg.deleted) return;
				if (btn.user.id != user.id && btn.user.id != message.author.id)
					return btn.reply({ content: "–¢—ã —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—à—å!", ephemeral: true });
				if (btn.user.id === last) return btn.reply({ content: "–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Ö–æ–¥–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑!", ephemeral: true });
				if (btn.user.id === message.author.id) {
					buttons[Number(btn.customId)].setEmoji("‚ùå").setDisabled(true);
					t[Number(btn.customId)] = 0;
				} else {
					buttons[Number(btn.customId)].setEmoji("‚≠ï").setDisabled(true);
					t[Number(btn.customId)] = 1;
				}

				const winner = checkWinner(t, message.author, user);
				if (winner) {
					if (winner === "draw") {
						embed.setDescription("–ù–∏—á—å—è!");
						embed.setColor("ORANGE");
					} else {
						embed.setDescription(`–ü–æ–±–µ–¥–∏–ª(-–∞) ${winner}`);
						embed.setColor("GREEN");
					}

					buttons.forEach((b) => {
						b.setDisabled(true);
					});
				} else {
					last = btn.user.id;
					embed.setDescription(`–•–æ–¥–∏—Ç: ${btn.user.id === message.author.id ? user : message.author}`);
				}

				btn.update({ embeds: [embed], components: components(buttons) });
			});

			SecondCollector.on("end", () => {
				if (message.deleted) return;
				if (checkWinner(t, message.author, user)) return;

				embed.setDescription("–í—Ä–µ–º—è –≤—ã—à–ª–æ!");
				embed.setColor("RED");
				buttons.forEach((b) => b.setDisabled(true));

				msg.edit({ embeds: [embed], components: components(buttons) });
			});

			FirstCollector.stop();
		});
		FirstCollector.on("end", () => {
			if (success) return;
			message.channel.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ!");
		});
	},
};

function checkWinner(t, p, u) {
	if (
		(t[0] == 0 && t[1] == 0 && t[2] == 0) ||
		(t[3] == 0 && t[4] == 0 && t[5] == 0) ||
		(t[6] == 0 && t[7] == 0 && t[8] == 0) ||
		(t[0] == 0 && t[3] == 0 && t[6] == 0) ||
		(t[1] == 0 && t[4] == 0 && t[7] == 0) ||
		(t[2] == 0 && t[5] == 0 && t[8] == 0) ||
		(t[0] == 0 && t[4] == 0 && t[8] == 0) ||
		(t[2] == 0 && t[4] == 0 && t[6] == 0)
	)
		return p;
	if (
		(t[0] == 1 && t[1] == 1 && t[2] == 1) ||
		(t[3] == 1 && t[4] == 1 && t[5] == 1) ||
		(t[6] == 1 && t[7] == 1 && t[8] == 1) ||
		(t[0] == 1 && t[3] == 1 && t[6] == 1) ||
		(t[1] == 1 && t[4] == 1 && t[7] == 1) ||
		(t[2] == 1 && t[5] == 1 && t[8] == 1) ||
		(t[0] == 1 && t[4] == 1 && t[8] == 1) ||
		(t[2] == 1 && t[4] == 1 && t[6] == 1)
	)
		return u;

	if (
		t[0] != undefined &&
		t[1] != undefined &&
		t[2] != undefined &&
		t[3] != undefined &&
		t[4] != undefined &&
		t[5] != undefined &&
		t[6] != undefined &&
		t[7] != undefined &&
		t[8] != undefined
	)
		return "draw";
}
